(defun prompt-letter (string)
  (format t "~a: " string)
  (setf result (read-char))
  (read-line)
  (return-from prompt-letter result))

(defun choose-word (from)
  (nth (random (length from)) from))

(defun known-word (word letters)
  (map 'string (lambda (x) (if (find x letters) x #\_)) word))

(defun complete (word letters)
  (equal nil (find #\_ (known-word word letters))))

(defun game-loop (dict)
  (let ((word (choose-word dict))
        (letters nil)
        (missed 0)
        (max_missed 6))
    (do ()
      ((or (complete word letters) (>= missed max_missed)) nil)
      (let ()
        (format t "~a~%" (known-word word letters))
        (setf letter (prompt-letter "Votre proposition: ")))
        (push letter letters)
        (setf missed (if (find letter word) missed (+ 1 missed))))
    (if (complete word letters) (format t "Bravo, c'était bien: ") (format t "Perdu, c'était: "))
    (format t "~a~%" word)))

(defun load-dict (filename)
  (let ((result nil))
    (with-open-file (stream filename :direction :input)
      (do ((line (read-line stream nil) (read-line stream nil)))
        ((null line))
        (push line result)))
    (return-from load-dict result)))

(defun game ()
  (setf *random-state* (make-random-state t))
  (do ((exit nil))
    (exit nil)
    (let ()
      (format t "J'ai choisis un mot. Trouvez les lettres qui le composent. Vous avez le droit à 6 erreurs.~%")
      (game-loop (load-dict "dictionnaire.txt"))
      (if (equalp #\y (prompt-letter "Quitter ? [y/n]")) (setq exit T)))))

;(format t "~a~%" (choose-word (list "toto" "titi" "tata" "tutu")))
;(format t "~a~%" (known-word "toto" "t"))
;(format t "~a~%" (known-word "antioxydant" "abedt"))
